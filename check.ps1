#   Copyright 2022 Jacob Kiesel
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# https://stackoverflow.com/questions/47032005/why-does-a-powershell-script-not-end-when-there-is-a-non-zero-exit-code-using-th
# Thanks Phil!
function Invoke-NativeCommand() {
    # A handy way to run a command, and automatically throw an error if the
    # exit code is non-zero.

    if ($args.Count -eq 0) {
        throw "Must supply some arguments."
    }

    $command = $args[0]
    $commandArgs = @()
    if ($args.Count -gt 1) {
        $commandArgs = $args[1..($args.Count - 1)]
    }

    & $command $commandArgs
    $result = $LASTEXITCODE

    if ($result -ne 0) {
        throw "$command $commandArgs exited with code $result."
    }
}

# Load up code for getting product codes from an MSI file.
$msiTools = Add-Type -PassThru -Name 'MsiTools' -Using 'System.Text' -MemberDefinition $(Get-Content "MsiTools.cs")
Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
Install-Module -Name powershell-yaml -AcceptLicense
Import-Module powershell-yaml
Invoke-NativeCommand gh auth setup-git
Invoke-NativeCommand git config --global user.email "kieseljake+rust-winget-bot@live.com"
Invoke-NativeCommand git config --global user.name "Rust-Winget-Bot"
Invoke-NativeCommand gh repo clone "Rust-Winget-Bot/winget-pkgs" "--" --depth 1
Set-Location winget-pkgs
Invoke-NativeCommand git pull upstream master
Invoke-NativeCommand git push
$yamlHeaderInstaller = @'
# Auto-generated by Rust-Winget-Bot (https://github.com/Rust-Winget-Bot)
# yaml-language-server: $schema=https://aka.ms/winget-manifest.installer.1.6.0.schema.json


'@
$yamlHeaderDefaultLocale = @'
# Auto-generated by Rust-Winget-Bot (https://github.com/Rust-Winget-Bot)
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.6.0.schema.json


'@
$yamlHeaderVersion = @'
# Auto-generated by Rust-Winget-Bot (https://github.com/Rust-Winget-Bot)
# yaml-language-server: $schema=https://aka.ms/winget-manifest.version.1.6.0.schema.json


'@
$lastFewVersions = Invoke-NativeCommand git ls-remote --sort=-v:refname --tags https://github.com/rust-lang/rust.git
  | Select-String -Pattern "refs/tags/(\d+?\.\d+?\.\d+?$)"
  | ForEach-Object { $_.Matches[0].Groups[1].Value }
  | Select-Object -First 3;
$myPrs = Invoke-NativeCommand gh pr list --author "Rust-Winget-Bot" --repo "microsoft/winget-pkgs" --state=all
  | Foreach-Object {((($_ -split '\t')[2]) -split ':')[1]};
foreach ($toolchain in @("MSVC", "GNU")) {
    $toolchainLower = $toolchain.ToLower();
    $publishedVersions = Get-ChildItem .\manifests\r\Rustlang\Rust\$toolchain
      | Foreach-Object {$_.Name}
      | Select-String -Pattern "^\d+?\.\d+?\.\d+$"
      | ForEach-Object { $_.Matches[0].Value }
      | Select-Object -Last 5
    foreach ($version in $lastFewVersions) {
        if ($publishedVersions.Contains($version)) {
            continue;
        } else {
            if ($myPrs -and $myPrs.Contains("rust-$version-$toolchainLower")) {
                continue;
            }
            Write-Output "Creating branch for $version $toolchain"
            Invoke-NativeCommand git checkout master;
            Invoke-NativeCommand git checkout -b rust-$version-$toolchainLower;
            New-Item "manifests/r/Rustlang/Rust/$toolchain/$version/" -ItemType Directory -ea 0
            $yamlPath = "manifests/r/Rustlang/Rust/$toolchain/$version/Rustlang.Rust.$toolchain.installer.yaml";
            $yamlObject = [ordered]@{
                PackageIdentifier = "Rustlang.Rust.$toolchain";
                PackageVersion = $version;
                MinimumOSVersion = "10.0.0.0";
                InstallerType = "wix";
                UpgradeBehavior = "uninstallPrevious";
                Installers = @(); # To be filled later
                ManifestType = "installer";
                ManifestVersion = "1.6.0";
            };
             if ($toolchain -eq "MSVC") {
                $installers = @(
                    "https://static.rust-lang.org/dist/rust-$version-aarch64-pc-windows-msvc.msi",
                    "https://static.rust-lang.org/dist/rust-$version-i686-pc-windows-msvc.msi",
                    "https://static.rust-lang.org/dist/rust-$version-x86_64-pc-windows-msvc.msi"
                );
            } else {
                $installers = @(
                    "https://static.rust-lang.org/dist/rust-$version-i686-pc-windows-gnu.msi",
                    "https://static.rust-lang.org/dist/rust-$version-x86_64-pc-windows-gnu.msi"
                );
            }
            foreach ($installer in $installers) {
                $path = $installer.Substring($installer.LastIndexOf('/') + 1);
                Write-Output "Now downloading $path from $installer"
                Invoke-WebRequest -Uri $installer -Outfile $path
                if(!$?) {
                    Write-Output "Failed to download file, skipping"
                    continue;
                }
                $sha256 = (Get-FileHash $path -Algorithm SHA256).Hash;
                Remove-Item $path;
                Invoke-WebRequest -Uri $installer -Outfile $path
                if(!$?) {
                    Write-Output "Failed to download file, skipping"
                    continue;
                }
                $sha256_2 = (Get-FileHash $path -Algorithm SHA256).Hash;
                if (-not($sha256 -eq $sha256_2)) {
                    throw "Sha256 returned two different results, shutting down to lack of confidence in sha value"
                }
                $absolutePath = Resolve-Path $path;
                $productCode = $msiTools::GetProductCode($absolutePath)
                $productName = $msiTools::GetProductName($absolutePath);
                $productVersion = $msiTools::GetProductVersion($absolutePath);
                Remove-Item $path;
                $arch = if ($installer.Contains("i686")) {
                    "x86"
                } elseif ($installer.Contains("x86_64")) {
                    "x64"
                } elseif ($installer.Contains("aarch64")) {
                    "arm64"
                }
                
                $appsAndFeaturesEntry = [ordered]@{
                    DisplayName = $productName;
                    ProductCode = $productCode;
                    DisplayVersion = $productVersion;
                };
                $installerEntry = [ordered]@{
                    Architecture = $arch;
                    InstallerUrl = $installer;
                    InstallerSha256 = $sha256;
                    ProductCode = $productCode;
                    AppsAndFeaturesEntries = @($appsAndFeaturesEntry);
                };
                $yamlObject.Installers += $installerEntry
            }
            $newYamlData = -join($yamlHeaderInstaller, (ConvertTo-YAML $yamlObject));
            Set-Content -Path $yamlPath -Value $newYamlData;
            $yamlPath = "manifests/r/Rustlang/Rust/$toolchain/$version/Rustlang.Rust.$toolchain.locale.en-US.yaml";
            $yamlObject = [ordered]@{
                PackageIdentifier = "Rustlang.Rust.$toolchain";
                PackageVersion = $version;
                PackageLocale = "en-US";
                Publisher = "The Rust Project Developers";
                PublisherUrl = "https://github.com/rust-lang/rust";
                PublisherSupportUrl = "https://github.com/rust-lang/rust/issues";
                Author = "The Rust Project Developers";
                PackageName = "Rust ($toolchain)";
                PackageUrl = "https://www.rust-lang.org/";
                License = "Apache 2.0 and MIT";
                LicenseUrl = "https://raw.githubusercontent.com/rust-lang/rust/master/COPYRIGHT";
                CopyrightUrl = "https://raw.githubusercontent.com/rust-lang/rust/master/COPYRIGHT";
                ShortDescription = "this is the rust-lang built with $toolchainLower toolchain";
                Moniker = "rust-$toolchainLower";
                Tags = @($toolchainLower, "rust", "windows");
                ManifestType = "defaultLocale";
                ManifestVersion = "1.6.0";
            };
            $newYamlData = -join($yamlHeaderDefaultLocale, (ConvertTo-YAML $yamlObject));
            Set-Content -Path $yamlPath -Value $newYamlData;
            $yamlPath = "manifests/r/Rustlang/Rust/$toolchain/$version/Rustlang.Rust.$toolchain.yaml";
            $yamlObject = [ordered]@{
                PackageIdentifier = "Rustlang.Rust.$toolchain";
                PackageVersion = $version;
                DefaultLocale = "en-US";
                ManifestType = "version";
                ManifestVersion = "1.6.0";
            };
            $newYamlData = -join($yamlHeaderVersion, (ConvertTo-YAML $yamlObject));
            Set-Content -Path $yamlPath -Value $newYamlData;
            Invoke-NativeCommand git add --all .
            Invoke-NativeCommand git commit -m"add Rustlang.Rust.$toolchain version $version"
            Invoke-NativeCommand git push -u origin rust-$version-$toolchainLower
            # Give GitHub a moment to propagate the presence of this new branch
            sleep 5

            $title = "add Rustlang.Rust.$toolchain version $version";
            $body = "This PR is auto-generated. If there's something wrong, please file an issue at https://github.com/Rust-Winget-Bot/my-source-code/issues";
            Invoke-NativeCommand gh pr create --title "$title" --body "$body" --repo microsoft/winget-pkgs --base master --head Rust-Winget-Bot:rust-$version-$toolchainLower
        }
    }
}
$closedPRs = Invoke-NativeCommand gh pr list --author "Rust-Winget-Bot" --repo "microsoft/winget-pkgs" --state=closed --limit 10
  | Foreach-Object {((($_ -split '\t')[2]) -split ':')[1]};

$branches = Invoke-NativeCommand git ls-remote --heads https://github.com/Rust-Winget-Bot/winget-pkgs.git
  | Select-String -Pattern "refs/heads/(.+$)"
  | ForEach-Object { $_.Matches[0].Groups[1].Value }

foreach ($pr in $closedPRs) {
    if ($branches.Contains($pr)) {
        Invoke-NativeCommand git push origin -d $pr
    }
}

